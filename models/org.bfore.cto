/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace org.bfore


/**
* The type of activities that students or mentors can do
*/ 
enum ActivityType {
  o LEARNING
  o TEACHING
}


asset ActivityContract identified by activityContractId {
  o String activityContractId
  o DateTime dueDate 
  o Integer earnedEducoin optional
  o Boolean winner optional
  --> Activity activity
  --> Student student 
}

/**
* An activity to be complete from mentors/students to earn EduCoin
*/
asset Activity identified by activityId {
  o String activityId
  o String activityName
  o String activityDescription optional
  o ActivityType activityType
  o Integer educoin
  o Integer bonusEducoin
  o Integer maxStudents
  o Integer currentStudents default=0 
  --> Campaign campaign optional
}

/**
* A concept for a simple street address
*/
concept Address {
  o String city
  o String country
  o String street
  o String zip
}

/**
* An abstract participant type in this business network
*/
abstract participant Business identified by participantId {
  o String participantId
  o String name
  o String email
  o Address address optional
  o Integer educoinBalance default=0
}

/** 
* A student is a type of participant in the network
*/
participant Student extends Business {
}

/**
* A mentor is a type of participant in the network
*/
participant Mentor extends Business {
}

/**
* A donor is a type of participant in the network
*/
participant Donor extends Business {
}

/**
* A vendor is a type of participant in the network
*/
participant Vendor extends Business {
}

/**
A campaign is also a participant, since it can transfer and own educoins.
For now is like a business, but may be changed later
 */
participant Campaign extends Business {
  o Integer fundingGoal default=0
  o Boolean funded // this means that the funding goal has been reached
  o Boolean completed // this means that all the activities have been added
}

/**
A donor can give Educoin to a campaign (funding) 
*/
transaction FundCampaign{
  o Integer educoinAmount
  --> Campaign campaign
}

/**
A student enroll to an Activity 
 */
transaction EnrollStudentToActivity {
  o String activityContractId
  o DateTime dueDate
  o Integer earnedEducoin optional
  o Boolean winner optional
  --> Activity activity
}

transaction AddActivityToCampaign {
  o String activityId
  o String activityName
  o String activityDescription optional
  o Boolean completeCampaign
  o Integer educoin
  o Integer bonusEducoin
  o Integer maxStudents
  o ActivityType activityType
}

/**
A student complete an activity 
 */
transaction StudentCompleteActivity {
  -->ActivityContract activityContract 
  o DateTime today
}

/**
Just for initializing a Demo
 */
transaction SetupDemo {
}